package io.techery.janet;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeSpec;

import java.util.ArrayList;

import javax.annotation.processing.Filer;
import javax.lang.model.element.Modifier;

import io.techery.janet.compiler.utils.Generator;

public class AsyncFactoryGenerator extends Generator<AsyncActionClass> {

    public AsyncFactoryGenerator(Filer filer) {
        super(filer);
    }

    @Override
    public void generate(ArrayList<AsyncActionClass> actionClasses) {
        TypeSpec.Builder classBuilder = TypeSpec.classBuilder(AsyncActionService.FACTORY_CLASS_SIMPLE_NAME)
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .addJavadoc("Janet compile time, autogenerated class")
                .addSuperinterface(AsyncActionService.AsyncActionWrapperFactory.class);

        MethodSpec.Builder makeMethodBuilder = MethodSpec.methodBuilder("make")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(ParameterizedTypeName.get(AsyncActionWrapper.class))
                .addParameter(ActionHolder.class, "holder");

        makeMethodBuilder.addStatement("Class actionClass = holder.action().getClass()");

        for (AsyncActionClass actionClass : actionClasses) {
            makeMethodBuilder.beginControlFlow("if(actionClass == $T.class)", actionClass.getTypeElement());
            makeMethodBuilder.addStatement(" return new $T((ActionHolder<$T>)holder)", ClassName.bestGuess(actionClass.getFullWrapperName()), actionClass
                    .getTypeElement());
            makeMethodBuilder.endControlFlow();
        }
        makeMethodBuilder.addStatement("return null");
        classBuilder.addMethod(makeMethodBuilder.build());
        saveClass(AsyncActionService.class.getPackage().getName(), classBuilder.build());
    }
}
